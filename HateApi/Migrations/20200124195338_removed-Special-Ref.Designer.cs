// <auto-generated />
using HateApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HateApi.Migrations
{
    [DbContext(typeof(HateContext))]
    [Migration("20200124195338_removed-Special-Ref")]
    partial class removedSpecialRef
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HateApi.Models.Scenario", b =>
                {
                    b.Property<int>("ScenarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prereq")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScenarioId");

                    b.ToTable("Scenarios");

                    b.HasData(
                        new
                        {
                            ScenarioId = 1,
                            Description = "Blah blah blah",
                            Name = "TestScenario1",
                            Prereq = "Must have X, Y, and Z"
                        },
                        new
                        {
                            ScenarioId = 2,
                            Description = "asdfasfdsf",
                            Name = "TestScenario2",
                            Prereq = "adsfasfd"
                        });
                });

            modelBuilder.Entity("HateApi.Models.Special", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialTypeId")
                        .HasColumnType("int");

                    b.HasKey("SpecialId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Specials");

                    b.HasData(
                        new
                        {
                            SpecialId = 1,
                            Name = "Special1",
                            ScenarioId = 1,
                            SpecialTypeId = 1
                        },
                        new
                        {
                            SpecialId = 2,
                            Name = "Special2",
                            ScenarioId = 1,
                            SpecialTypeId = 2
                        });
                });

            modelBuilder.Entity("HateApi.Models.SpecialType", b =>
                {
                    b.Property<int>("SpecialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialTypeId");

                    b.ToTable("SpecialTypes");

                    b.HasData(
                        new
                        {
                            SpecialTypeId = 1,
                            Name = "Special Actions"
                        },
                        new
                        {
                            SpecialTypeId = 2,
                            Name = "Special Rules"
                        });
                });

            modelBuilder.Entity("HateApi.Models.Special", b =>
                {
                    b.HasOne("HateApi.Models.Scenario", "Scenario")
                        .WithMany("Specials")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HateApi.Models.SpecialType", b =>
                {
                    b.HasOne("HateApi.Models.Special", "Special")
                        .WithOne("SpecialType")
                        .HasForeignKey("HateApi.Models.SpecialType", "SpecialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
